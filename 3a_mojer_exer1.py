# -*- coding: utf-8 -*-
"""3A_MOJER_EXER1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Mojerrrrrrrr/CSST-101-CS3A/blob/main/3A_MOJER_EXER1.ipynb

Exercise 1: Propositional Logic in Python
"""

def is_raining():
    return True

def is_ground_wet(raining):
    if raining:
        return True
    return False

def will_match_light(ground_wet):
    if ground_wet:
        return False
    return True


raining = is_raining()
ground_wet = is_ground_wet(raining)
match_lights = will_match_light(ground_wet)

print("Is it raining?", raining)
print("Is the ground wet?", ground_wet)
print("Will the match light?", match_lights)

"""Exercise 2: Predicate Logic Representation"""

def is_human(entity):
    return entity == "Socrates"

def is_mortal(entity):
    if is_human(entity):
        return True
    return False


entity = "Socrates"
socrates_mortal = is_mortal(entity)

print(f"Is {entity} mortal?", socrates_mortal)

"""Exercise 3: Inference Techniques in Logic-Based Systems"""

def apply_modus_ponens(rules, facts):
    conclusions = set()

    for rule in rules:
        antecedent, consequent = rule
        if antecedent in facts:
            conclusions.add(consequent)

    return conclusions

rules = [
    ("It rains", "The ground is wet"),
    ("The ground is wet", "The match will not light"),
    ("It is sunny", "The ground is dry"),
]


facts = {"It rains"}

conclusions = apply_modus_ponens(rules, facts)

print("Facts:", facts)
print("Conclusions after applying Modus Ponens:", conclusions)

new_facts = facts.union(conclusions)
new_conclusions = apply_modus_ponens(rules, new_facts)

print("New Conclusions after second inference:", new_conclusions)

"""Exercise 4: Hands-on Lab - Implementing a Logic-Based Model in Python"""

def is_hungry(person):
    return person == "John"

def will_eat(hungry):
    if hungry:
        return True
    return False

def no_longer_hungry(ate):
    if ate:
        return True
    return False


person = "John"
hungry = is_hungry(person)
ate = will_eat(hungry)
not_hungry = no_longer_hungry(ate)

print(f"Is {person} hungry? {hungry}")
print(f"Did {person} eat? {ate}")
print(f"Is {person} no longer hungry? {not_hungry}")